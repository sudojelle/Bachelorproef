# One Vagrantfile to rule them all!
#
# Hosts and their properties are specified in `vagrant-hosts.yml`. Provisioning
# is done by a shell script in `scripts/` matching each host name.

require 'rbconfig'
require 'yaml'

# set default LC_ALL for all boxes
ENV["LC_ALL"] = "en_US.UTF-8"

# Directory containing VM provisioning scripts
PROVISIONING_SCRIPT_DIR = 'scripts/'

VAGRANTFILE_API_VERSION = '2'
PROJECT_NAME = '/' + File.basename(Dir.getwd)

# load hosts definition
vagrant_hosts = ENV['VAGRANT_HOSTS'] || 'vagrant-hosts.yml'
hosts = YAML.load_file(File.join(__dir__, vagrant_hosts))

# {{{ Helper functions

def network_options(host)
  options = {}
  if host.key?('ip')
    options[:ip]      = host['ip']
    options[:netmask] = host['netmask'] || '255.255.255.0'
  else
    options[:type] = 'dhcp'
  end
  options[:mac]              = host['mac'].gsub(/[-:]/, '') if host.key?('mac')
  options[:auto_config]      = host['auto_config'] if host.key?('auto_config')
  options[:virtualbox__intnet] = true if host['intnet']
  options
end

def custom_synced_folders(vm, host)
  return unless host.key?('synced_folders')
  host['synced_folders'].each do |folder|
    vm.synced_folder folder['src'], folder['dest'], folder['options']
  end
end

def forwarded_ports(vm, host)
  return unless host.key?('forwarded_ports')
  host['forwarded_ports'].each do |port|
    vm.network "forwarded_port",
               guest: port['guest'],
               host:  port['host']
  end
end

# }}}

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  hosts.each do |host|
    # require explicit box per-host
    unless host.key?('box')
      abort "Error: no 'box' defined for host #{host['name']} in #{vagrant_hosts}"
    end

    config.vm.define host['name'] do |node|
      node.vm.box      = host['box']
      node.vm.box_url  = host['box_url'] if host.key?('box_url')
      node.vm.hostname = host['name']

      node.vm.network :private_network, **network_options(host)
      custom_synced_folders(node.vm, host)
      forwarded_ports(node.vm, host)

      # SSH credentials
      node.ssh.username = host['ssh_username'] if host.key?('ssh_username')
      node.ssh.password = host['ssh_password'] if host.key?('ssh_password')

      # VirtualBox settings
      node.vm.provider :virtualbox do |vb|
        # make the VMâ€™s visible name exactly the host name (no extra numbers)
        vb.name = host['name']

        vb.memory = host['memory'] if host.key?('memory')
        vb.cpus   = host['cpus']   if host.key?('cpus')
        vb.customize ['modifyvm', :id, '--groups', PROJECT_NAME]
      end

      # VMware Desktop settings
      node.vm.provider :vmware_desktop do |vmw|
        # VMware: set the display name to the host name
        vmw.vmx['displayName'] = host['name']

        vmw.vmx["memsize"]  = host['memory'] if host.key?('memory')
        vmw.vmx["numvcpus"] = host['cpus']   if host.key?('cpus')
      end

      # Provisioning script
      script = File.join(PROVISIONING_SCRIPT_DIR, "#{host['name']}.sh")
      if File.exist?(script)
        node.vm.provision 'shell', path: script
      end
    end
  end
end
